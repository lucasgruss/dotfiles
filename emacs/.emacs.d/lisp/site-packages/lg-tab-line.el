;;; lg-tab-line.el --- My configuration for the native tab-line -*- lexical-binding: t; -*-

(require 'tab-line)
(require 'all-the-icons)

;; https://andreyorst.gitlab.io/posts/2020-05-10-making-emacs-tabs-look-like-in-atom/
(defcustom tab-line-tab-min-width 10
  "Minimum width of a tab in characters."
  :type 'integer
  :group 'tab-line)

(defcustom tab-line-tab-max-width 25
  "Maximum width of a tab in characters."
  :type 'integer
  :group 'tab-line)

(defun lg/tab-line-tab-name-format (tab tabs)
  "Adapted version of the default function to use as
`tab-line-tab-name-format-function'. It puts an icon using
all-the-icons at the left of the tab name."
  (let* ((buffer-p (bufferp tab))
	 (selected-p (if buffer-p
			 (eq tab (window-buffer))
		       (cdr (assq 'selected tab))))
	 (name (if buffer-p
		   (funcall tab-line-tab-name-function tab tabs)
		 (cdr (assq 'name tab))))
	 (face (if selected-p
		   (if (eq (selected-window) (old-selected-window))
		       'tab-line-tab-current
		     'tab-line-tab)
		 'tab-line-tab-inactive)))
    (dolist (fn tab-line-tab-face-functions)
      (setf face (funcall fn tab tabs face buffer-p selected-p)))
    (concat
     (if buffer-p
	 (with-current-buffer tab
	   (all-the-icons-icon-for-mode major-mode :face face)))
     (apply 'propertize
	    (concat
	     " "
	     (propertize name
			 'keymap tab-line-tab-map
			 'help-echo (if selected-p "Current tab"
				      "Click to select tab")
			 ;; Don't turn mouse-1 into mouse-2 (bug#49247)
			 'follow-link 'ignore)
	     (or (and (or buffer-p (assq 'buffer tab) (assq 'close tab))
		      tab-line-close-button-show
		      (not (eq tab-line-close-button-show
			       (if selected-p 'non-selected 'selected)))
		      tab-line-close-button)
		 ""))
	    `(
	      tab ,tab
	      ,@(if selected-p '(selected t))
	      face ,face
	      mouse-face tab-line-highlight)))))

;; slightly adapted from aorst
(defun lg/tab-line-name-buffer-padded (buffer &rest _buffers)
  (with-current-buffer buffer
    (let* ((window-width (window-width (get-buffer-window)))
	   (close-button-size (if tab-line-close-button-show
				  (length (substring-no-properties tab-line-close-button))
				0))
	   (tab-amount (length (tab-line-tabs-mode-buffers)))
	   (window-max-tab-width (/ window-width tab-amount))
	   (tab-width (- (cond ((>= window-max-tab-width tab-line-tab-max-width)
				tab-line-tab-max-width)
			       ((< window-max-tab-width tab-line-tab-min-width)
				tab-line-tab-min-width)
			       (t window-max-tab-width))
			 close-button-size))
	   (buffer-name (string-trim (buffer-name)))
	   (name-width (length buffer-name)))
      (if (>= name-width (- tab-width 3))
	  (concat  " " (truncate-string-to-width buffer-name (- tab-width 3)) "â€¦ ")
	(let* ((padding (make-string (/ (- tab-width name-width) 2) ?\s))
	       (buffer-name (concat padding buffer-name))
	       (name-width (length buffer-name)))
	  (concat " " buffer-name (make-string (- tab-width name-width) ?\s)))))))

(defun lg/tab-line-new-tab ()
  "Set the behaviour of a new tab, dependent on the current major
mode."
  (cond
   ((eq major-mode 'eshell-mode)
    (eshell t))
   ((eq major-mode 'vterm-mode)
    (vterm))
   ((eq major-mode 'term-mode)
    (ansi-term "/bin/bash"))
   ((derived-mode-p 'eww-mode)
    (let ((current-prefix-arg 4))
      (call-interactively #'eww-browse-with-history)))
   (t
    (call-interactively #'find-file))))

(defun lg/tab-line-kill-buffer (&optional tab)
  "Kill the buffer and switch to the previous tab if available."
  (let* ((selected-p (if (bufferp tab)
			 (eq tab (window-buffer))
		       (cdr (assq 'selected tab)))))
    (when selected-p
      (tab-line-switch-to-prev-tab))
    (kill-buffer tab)))

(provide 'lg-tab-line)
